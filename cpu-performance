#!/bin/bash

# Fallback governor
target_governor="performance"

# Precedence order:
# 1. Command-line argument
# 2. ~/.config/cpu-performance.conf
# 3. /etc/cpu-performance.conf
# 4. Hardcoded fallback

# Load system-wide config if it exists
if [[ -f /etc/cpu-performance.conf ]]; then
    source /etc/cpu-performance.conf
fi

# Try to get the calling user's actual home directory, not root's
user_home=$(getent passwd "$SUDO_USER" | cut -d: -f6)

if [[ -n "$user_home" && -f "$user_home/.config/cpu-performance.conf" ]]; then
    source "$user_home/.config/cpu-performance.conf"
fi


# Override with command-line argument if provided
if [[ -n "$1" ]]; then
    target_governor="$1"
    echo "Using governor (from CLI): $target_governor"
fi

# Must be run as root
if [[ $EUID -ne 0 ]]; then
    echo "Please run as root."
    exit 1
fi

# Verify the scaling_governor file is present and readable
if [[ ! -r /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ]]; then
    echo "Error: Cannot read current governor (missing or unreadable)."
    exit 1
fi

# Verify the requested governor is available
if ! grep -qw "$target_governor" /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors; then
    echo "Governor '$target_governor' is not available. Available governors:"
    cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors
    exit 1
fi

# Check current governor
current_governor=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)

# Only change if different
if [[ "$current_governor" != "$target_governor" ]]; then
    echo "Setting CPU governor to '$target_governor'..."
    for cpu in /sys/devices/system/cpu/cpu[0-9]*; do
        echo "$target_governor" > "$cpu/cpufreq/scaling_governor"
    done
    echo "Governor has been set to '$target_governor'."
else
    echo "CPU governor is already set to '$target_governor'."
fi
